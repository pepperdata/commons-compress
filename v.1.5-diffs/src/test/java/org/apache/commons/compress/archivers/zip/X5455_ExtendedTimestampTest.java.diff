--- apache-commons-compress-1.5-src/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java	2013-03-14 01:43:27.000000000 -0700
+++ pd-apache-commons-compress/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java	2024-05-23 17:23:05.000000000 -0700
@@ -61,6 +61,12 @@
         xf = new X5455_ExtendedTimestamp();
     }
 
+    // NOTE(ankan): This unit test was failing with JDK 1.8, but passing with JDK < 1.8.
+    // Turns out this test received a patch to fix it with commons-compress v. 1.11: see
+    // https://issues.apache.org/jira/browse/COMPRESS-326.  I applied the fix from
+    // commit a2cda30be14b3da01cbbbedc41b70daf6d88da8b to this file (for the entire patched file,
+    // see https://github.com/apache/commons-compress/blob/rel/1.11/src/test/java/org/apache/
+    //   commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java).
     @Test
     public void testSampleFile() throws Exception {
 
@@ -84,6 +90,11 @@
         1999's zip time:  Jan 1st, 1999-01-01/00:00:02
         1999's mod time:  Jan 1st, 1999-01-01/00:00:01
         1999's acc time:  Jan 1st, 1999-01-01/00:00:03
+
+        Starting with a patch release of Java8, "zip time" actually
+        uses the extended time stamp field itself and should be the
+        same as "mod time".
+        http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/90df6756406f
          */
 
         File archive = getFile("COMPRESS-210_unix_time_zip_test.zip");
@@ -100,8 +111,10 @@
                 ZipArchiveEntry zae = en.nextElement();
                 String name = zae.getName();
                 X5455_ExtendedTimestamp xf = (X5455_ExtendedTimestamp) zae.getExtraField(X5455);
-                Date z = adjustFromGMTToExpectedOffset(zae.getLastModifiedDate());
+                Date rawZ = zae.getLastModifiedDate();
                 Date m = xf.getModifyJavaTime();
+                boolean zipTimeUsesExtendedTimestamp = rawZ.equals(m);
+                Date z = zipTimeUsesExtendedTimestamp ? rawZ : adjustFromGMTToExpectedOffset(rawZ);
                 Date a = xf.getAccessJavaTime();
 
                 String zipTime = DATE_FORMAT.format(z);
@@ -120,24 +133,30 @@
                     if (year >= 0) {
                         switch (year) {
                             case 2107:
-                                // Zip time is okay up to 2107.
-                                assertEquals(year + "-01-01/00:00:02 +0000", zipTime);
+                                if (!zipTimeUsesExtendedTimestamp) {
+                                    // Zip time is okay up to 2107.
+                                    assertEquals(year + "-01-01/00:00:02 +0000", zipTime);
+                                }
                                 // But the X5455 data has overflowed:
                                 assertEquals("1970-11-24/17:31:45 +0000", modTime);
                                 assertEquals("1970-11-24/17:31:47 +0000", accTime);
                                 break;
                             case 2108:
-                                // Zip time is still okay at Jan 1st midnight (UTC) in 2108
-                                // because we created the zip file in pacific time zone, so it's
-                                // actually still 2107 in the zip file!
-                                assertEquals(year + "-01-01/00:00:02 +0000", zipTime);
+                                if (!zipTimeUsesExtendedTimestamp) {
+                                    // Zip time is still okay at Jan 1st midnight (UTC) in 2108
+                                    // because we created the zip file in pacific time zone, so it's
+                                    // actually still 2107 in the zip file!
+                                    assertEquals(year + "-01-01/00:00:02 +0000", zipTime);
+                                }
                                 // The X5455 data is still overflowed, of course:
                                 assertEquals("1971-11-24/17:31:45 +0000", modTime);
                                 assertEquals("1971-11-24/17:31:47 +0000", accTime);
                                 break;
                             case 2109:
                                 // All three timestamps have overflowed by 2109.
-                                assertEquals("1981-01-01/00:00:02 +0000", zipTime);
+                                if (!zipTimeUsesExtendedTimestamp) {
+                                    assertEquals("1981-01-01/00:00:02 +0000", zipTime);
+                                }
                                 assertEquals("1972-11-24/17:31:45 +0000", modTime);
                                 assertEquals("1972-11-24/17:31:47 +0000", accTime);
 
@@ -147,12 +166,14 @@
 
                                 break;
                             default:
-                                // X5455 time is good from epoch (1970) to 2106.
-                                // Zip time is good from 1980 to 2107.
-                                if (year < 1980) {
-                                    assertEquals("1980-01-01/08:00:00 +0000", zipTime);
-                                } else {
-                                    assertEquals(year + "-01-01/00:00:02 +0000", zipTime);
+                                if (!zipTimeUsesExtendedTimestamp) {
+                                    // X5455 time is good from epoch (1970) to 2106.
+                                    // Zip time is good from 1980 to 2107.
+                                    if (year < 1980) {
+                                        assertEquals("1980-01-01/08:00:00 +0000", zipTime);
+                                    } else {
+                                        assertEquals(year + "-01-01/00:00:02 +0000", zipTime);
+                                    }
                                 }
                                 assertEquals(year + "-01-01/00:00:01 +0000", modTime);
                                 assertEquals(year + "-01-01/00:00:03 +0000", accTime);
