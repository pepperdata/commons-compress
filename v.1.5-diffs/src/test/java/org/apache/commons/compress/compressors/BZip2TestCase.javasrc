/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.commons.compress.compressors;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.util.Arrays;

import org.apache.commons.compress.AbstractTestCase;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.apache.commons.compress.utils.IOUtils;

/*
 * NOTE(ankan): I reshuffled and reorganized this code structurally to as closely match
 * the layout in v. 1.26.2 as possible, so that it's easier to compare side-by-side and
 * minimize the diffs.  I also added some warning suppressions.
 */

@SuppressWarnings("ResultOfMethodCallIgnored")
public final class BZip2TestCase extends AbstractTestCase {

    public void testBzip2Unarchive() throws IOException, CompressorException {
        final File input = getFile("bla.txt.bz2");
        final File output = new File(dir, "bla.txt");
        final InputStream is = new FileInputStream(input);
        final CompressorInputStream in =
            new CompressorStreamFactory().createCompressorInputStream("bzip2", is);
        FileOutputStream os = new FileOutputStream(output);
        IOUtils.copy(in, os);
        is.close();
        os.close();
    }

    public void testBzipCreation() throws IOException, CompressorException {
        File output;
        final File input = getFile("test.txt");
        {
            output = new File(dir, "test.txt.bz2");
            final OutputStream out = new FileOutputStream(output);
            final CompressorOutputStream cos =
                new CompressorStreamFactory().createCompressorOutputStream("bzip2", out);
            FileInputStream in = new FileInputStream(input);
            IOUtils.copy(in, cos);
            cos.close();
            in.close();
        }

        final File decompressed = new File(dir, "decompressed.txt");
        {
            final InputStream is = new FileInputStream(output);
            final CompressorInputStream in =
                new CompressorStreamFactory().createCompressorInputStream("bzip2", is);
            FileOutputStream os = new FileOutputStream(decompressed);
            IOUtils.copy(in, os);
            is.close();
            os.close();
        }

        assertEquals(input.length(),decompressed.length());
    }

    public void testCOMPRESS131() throws IOException {
        final File input = getFile("COMPRESS-131.bz2");
        final InputStream is = new FileInputStream(input);
        try {
            final CompressorInputStream in =
                new BZip2CompressorInputStream(is, true);
            try {
                int l = 0;
                while(in.read() != -1) {
                    l++;
                }
                assertEquals(539, l);
            } finally {
                in.close();
            }
        } finally {
            is.close();
        }
    }

    public void testConcatenatedStreamsReadFirstOnly() throws IOException, CompressorException {
        final File input = getFile("multiple.bz2");
        final InputStream is = new FileInputStream(input);
        try {
            final CompressorInputStream in = new CompressorStreamFactory()
                .createCompressorInputStream("bzip2", is);
            try {
                assertEquals('a', in.read());
                assertEquals(-1, in.read());
            } finally {
                in.close();
            }
        } finally {
            is.close();
        }
    }

    public void testConcatenatedStreamsReadFully() throws IOException {
        final File input = getFile("multiple.bz2");
        final InputStream is = new FileInputStream(input);
        try {
            final CompressorInputStream in =
                new BZip2CompressorInputStream(is, true);
            try {
                assertEquals('a', in.read());
                assertEquals('b', in.read());
                assertEquals(0, in.available());
                assertEquals(-1, in.read());
            } finally {
                in.close();
            }
        } finally {
            is.close();
        }
    }

    @SuppressWarnings("SpellCheckingInspection")
    private byte[] read_fully(InputStream in) throws IOException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        IOUtils.copy(in, baos);
        return baos.toByteArray();
    }

    private byte[] read_fully(File input) throws IOException {
        FileInputStream in = new FileInputStream(input);
        return read_fully(in);
    }

    @SuppressWarnings("SimplifiableAssertion")
    private void assert_bzip2_file_equals(File bz2file, byte[] data) throws IOException {
        // Deliberately do this with bzip2 command line, to better test for customers.
        Runtime rt = Runtime.getRuntime();
        String command = "bzip2 -cd " + bz2file.getAbsolutePath();
        Process p = rt.exec(command);
        System.out.printf("Ran %s%n", command);
        byte[] new_out = read_fully(p.getInputStream());
        byte[] new_err = read_fully(p.getErrorStream());

        assertTrue("stdout printed: " + new String(new_err), new_err.length == 0);
        assertTrue("Arrays not equal:\n" + Arrays.toString(new_out) + "\n" + Arrays.toString(data),
            Arrays.equals(new_out, data));
    }

    public void testBzipFlush() throws IOException {
        final File output = new File(dir, "test-flush.bz2");
        output.delete();
        final File input = getFile("testCompress209.doc");
        final RandomAccessFile out = new RandomAccessFile(output, "rw");
        final BZip2CompressorOutputStream cos = new BZip2CompressorOutputStream(out.getChannel());
        byte[] in_data = read_fully(input);

        cos.write(in_data, 0, 100);
        cos.flush();
        assert_bzip2_file_equals(output, Arrays.copyOfRange(in_data, 0, 100));

        cos.write(in_data, 100, 100);
        cos.flush();
        assert_bzip2_file_equals(output, Arrays.copyOfRange(in_data, 0, 200));

        cos.write(in_data, 200, in_data.length - 200);
        cos.close(); //Note close, not flush
        assert_bzip2_file_equals(output, in_data);
    }

    public void testBzipFlushFlushClose() throws IOException {
        final File output = new File(dir, "test-ffc.bz2");
        output.delete();
        final RandomAccessFile out = new RandomAccessFile(output, "rw");
        final BZip2CompressorOutputStream cos = new BZip2CompressorOutputStream(out.getChannel());
        byte[] in_data = {16, 10, 5, 116, 97, 105, 100, 49, 16, -87, -103, -80, -54, -124, 39, 26, 0};
        cos.printInternalState("pre-write");
        cos.write(in_data, 0, 17);
        cos.printInternalState("post-write");
        cos.flush();
        cos.printInternalState("post-flush1");
        cos.flush();
        cos.printInternalState("post-flush2");
        cos.close();
        cos.printInternalState("post-close");
        assert_bzip2_file_equals(output, in_data);
    }

    public void testBzipNoFlushClose() throws IOException {
        final File output = new File(dir, "test-nfc.bz2");
        output.delete();
        final RandomAccessFile out = new RandomAccessFile(output, "rw");
        final BZip2CompressorOutputStream cos = new BZip2CompressorOutputStream(out.getChannel());
        byte[] in_data = {16, 10, 5, 116, 97, 105, 100, 49, 16, -87, -103, -80, -54, -124, 39, 26, 0};
        cos.printInternalState("pre-write");
        cos.write(in_data, 0, 17);
        cos.printInternalState("post-write");
        cos.close();
        cos.printInternalState("post-close");
        assert_bzip2_file_equals(output, in_data);
    }

    public void testBzipFlushClose() throws IOException {
        final File output = new File(dir, "test-fc.bz2");
        output.delete();
        final RandomAccessFile out = new RandomAccessFile(output, "rw");
        final BZip2CompressorOutputStream cos = new BZip2CompressorOutputStream(out.getChannel());
        byte[] in_data = {16, 10, 5, 116, 97, 105, 100, 49, 16, -87, -103, -80, -54, -124, 39, 26, 0};
        cos.printInternalState("pre-write");
        cos.write(in_data, 0, 17);
        cos.printInternalState("post-write");
        cos.flush();
        cos.printInternalState("post-flush");
        cos.close();
        cos.printInternalState("post-close");
        assert_bzip2_file_equals(output, in_data);
    }

    public void testBzipNoWrite() throws IOException {
        final File output = new File(dir, "test-nw.bz2");
        output.delete();
        final RandomAccessFile out = new RandomAccessFile(output, "rw");
        final BZip2CompressorOutputStream cos = new BZip2CompressorOutputStream(out.getChannel());
        cos.printInternalState("pre-close");
        cos.close();
        cos.printInternalState("post-close");
        assert_bzip2_file_equals(output, new byte[0]);
    }

    public void testBzipNoWriteFlush() throws IOException {
        final File output = new File(dir, "test-nwf.bz2");
        output.delete();
        final RandomAccessFile out = new RandomAccessFile(output, "rw");
        final BZip2CompressorOutputStream cos = new BZip2CompressorOutputStream(out.getChannel());
        cos.printInternalState("pre-flush");
        cos.flush();
        cos.printInternalState("post-flush");
        assert_bzip2_file_equals(output, new byte[0]);
        cos.close();
        cos.printInternalState("post-close");
        assert_bzip2_file_equals(output, new byte[0]);
    }

}
